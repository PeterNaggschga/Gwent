package com.peternaggschga.gwent.data;

import androidx.annotation.NonNull;
import androidx.room.Dao;
import androidx.room.Insert;
import androidx.room.OnConflictStrategy;
import androidx.room.Query;

import com.peternaggschga.gwent.RowType;

import io.reactivex.rxjava3.core.Completable;
import io.reactivex.rxjava3.core.Flowable;
import io.reactivex.rxjava3.core.Single;

/**
 * An interface defining data access operations related to `rows` table.
 * The implementation is generated by the Room framework.
 */
@Dao
@SuppressWarnings("NullableProblems")
interface RowDao {
    /**
     * Inserts the given RowEntity into `rows`.
     * If the same RowType is already in the table, the new insert is ignored.
     *
     * @param row RowEntity that is being inserted.
     * @return A Completable tracking operation status.
     */
    @Insert(onConflict = OnConflictStrategy.IGNORE)
    Completable insertRow(@NonNull RowEntity row);

    /**
     * Deletes all RowEntity objects from `rows`.
     *
     * @return A Completable tracking operation status.
     */
    @Query("DELETE FROM rows")
    Completable clearRows();

    /**
     * Flips RowEntity#weather for the given RowType in `rows`.
     *
     * @param row RowType of the updated RowEntity.
     * @return A Completable tracking operation status.
     */
    @Query("UPDATE rows SET weather = NOT weather WHERE id = :row")
    Completable updateWeather(@NonNull RowType row);

    /**
     * Sets RowEntity#weather to `false` for all RowEntity elements in `rows`.
     *
     * @return A Completable tracking operation status.
     */
    @Query("UPDATE rows SET weather = 0")
    Completable clearWeather();

    /**
     * Flips RowEntity#horn for the given RowType in `rows`.
     *
     * @param row RowType of the updated RowEntity.
     * @return A Completable tracking operation status.
     */
    @Query("UPDATE rows SET horn = NOT horn WHERE id = :row")
    Completable updateHorn(@NonNull RowType row);

    /**
     * Fetches RowEntity#weather for the given RowType in `rows`.
     * @see #isWeatherFlowable(RowType)
     * @param row RowType of the queried RowEntity.
     * @return A Single tracking operation status and returning the value.
     */
    @Query("SELECT weather FROM rows WHERE id = :row")
    Single<Boolean> isWeather(@NonNull RowType row);

    /**
     * Fetches a Flowable of RowEntity#weather for the given RowType in `rows`.
     *
     * @param row RowType of the queried RowEntity.
     * @return A Flowable emitting the values.
     * @todo Add testing.
     * @see #isWeather(RowType)
     */
    @Query("SELECT weather FROM rows WHERE id = :row")
    Flowable<Boolean> isWeatherFlowable(@NonNull RowType row);

    /**
     * Fetches RowEntity#horn for the given RowType in `rows`.
     * @see #isHornFlowable(RowType)
     * @param row RowType of the queried RowEntity.
     * @return A Single tracking operation status and returning the value.
     */
    @Query("SELECT horn FROM rows WHERE id = :row")
    Single<Boolean> isHorn(@NonNull RowType row);

    /**
     * Fetches a Flowable of RowEntity#horn for the given RowType in `rows`.
     *
     * @param row RowType of the queried RowEntity.
     * @return A Flowable emitting the values.
     * @todo Add testing.
     * @see #isHorn(RowType)
     */
    @Query("SELECT horn FROM rows WHERE id = :row")
    Flowable<Boolean> isHornFlowable(@NonNull RowType row);
}
