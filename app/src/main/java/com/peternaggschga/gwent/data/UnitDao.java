package com.peternaggschga.gwent.data;

import androidx.annotation.IntRange;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.room.Dao;
import androidx.room.Delete;
import androidx.room.Insert;
import androidx.room.OnConflictStrategy;
import androidx.room.Query;

import java.util.Collection;
import java.util.List;

import io.reactivex.rxjava3.core.Completable;
import io.reactivex.rxjava3.core.Flowable;
import io.reactivex.rxjava3.core.Single;

/**
 * An interface defining data access operations related to `units` table.
 * The implementation is generated by the Room framework.
 */
@Dao
@SuppressWarnings("NullableProblems")
interface UnitDao {
    /**
     * Inserts the given UnitEntity into `units`.
     * If the same UnitEntity#id is already in the table, the new insert is ignored.
     *
     * @param unit UnitEntity that is being inserted.
     * @return A Completable tracking operation status.
     */
    @Insert(onConflict = OnConflictStrategy.IGNORE)
    Completable insertUnit(@NonNull UnitEntity unit);

    /**
     * Inserts a UnitEntity with the given values into `units`.
     *
     * @param epic    Boolean defining whether the unit is epic.
     * @param damage  Non-Negative value defining the base-damage of the unit.
     * @param ability Ability defining the ability of the unit.
     * @param squad   Non-Negative value defining the squad of units,
     *                if UnitEntity#ability is Ability#BINDING, or `null`.
     * @param row     RowType defining the UnitEntity#row foreign key.
     * @return A Completable tracking operation status.
     */
    @Query("INSERT INTO units (epic, damage, ability, squad, `row`) VALUES (:epic, :damage, :ability, :squad, :row)")
    Completable insertUnit(boolean epic, @IntRange(from = 0) int damage, @NonNull Ability ability, @IntRange(from = 0) @Nullable Integer squad, @NonNull RowType row);

    /**
     * Deletes the UnitEntity object with the given id from `units`.
     * @param id Integer representing the UnitEntity#id of the deleted UnitEntity.
     * @return A Completable tracking operation status.
     */
    @Query("DELETE FROM units WHERE `id` = :id")
    Completable deleteUnit(int id);

    /**
     * Deletes the given UnitEntity objects from `units`.
     *
     * @param units List of UnitEntity that are being inserted.
     * @return A Completable tracking operation status.
     */
    @Delete
    Completable deleteUnits(@NonNull Collection<UnitEntity> units);

    /**
     * Fetches the UnitEntity object with the given id from `units`.
     * @param id Integer representing the UnitEntity#id of the requested UnitEntity.
     * @return A Single tracking operation status and returning the value.
     */
    @Query("SELECT * FROM units WHERE `id` = :id")
    Single<UnitEntity> getUnit(int id);

    /**
     * Fetches all UnitEntity objects from `units` in the given row.
     * @see #getUnitsFlowable(RowType)
     * @param row RowType defining the UnitEntity#row foreign key.
     * @return A Single tracking operation status and returning the value.
     */
    @Query("SELECT * FROM units WHERE `row` = :row")
    Single<List<UnitEntity>> getUnits(@NonNull RowType row);

    /**
     * Fetches a Flowable for all UnitEntity objects from `units` in the given row.
     *
     * @param row RowType defining the UnitEntity#row foreign key.
     * @return A Flowable emitting the values.
     * @todo Add testing.
     * @see #getUnits(RowType)
     */
    @Query("SELECT * FROM units WHERE `row` = :row")
    Flowable<List<UnitEntity>> getUnitsFlowable(@NonNull RowType row);

    /**
     * Fetches all UnitEntity objects from `units`.
     * @return A Single tracking operation status and returning the value.
     */
    @Query("SELECT * FROM units")
    Single<List<UnitEntity>> getUnits();

    /**
     * Counts UnitEntity objects in `units` in the given row.
     * @param row RowType defining the UnitEntity#row foreign key.
     * @return A Single tracking operation status and returning the value.
     */
    @Query("SELECT COUNT(*) FROM units WHERE `row` = :row")
    Single<Integer> countUnits(@NonNull RowType row);

    /**
     * Counts UnitEntity objects in `units`.
     *
     * @return A Single tracking operation status and returning the value.
     */
    @Query("SELECT COUNT(*) FROM units")
    Single<Integer> countUnits();
}
